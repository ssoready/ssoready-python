# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .google_protobuf_any import GoogleProtobufAny


class Status(pydantic_v1.BaseModel):
    """
    The `Status` type defines a logical error model that is suitable for different programming environments,
    including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message
    contains three pieces of data: error code, error message, and error details.

    You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
    """

    code: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    The status code, which should be an enum value of [google.rpc.Code][google.rpc.code].
    """

    message: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    A developer-facing error message, which should be in English.
    
    Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.status.details]
    field, or localized by the client.
    """

    details: typing.Optional[typing.List[GoogleProtobufAny]] = pydantic_v1.Field(default=None)
    """
    A list of messages that carry the error details. There is a common set of message types for APIs to use.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
