# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import pydantic_v1
from ...core.query_encoder import encode_query
from ...core.remove_none_from_dict import remove_none_from_dict
from ...core.request_options import RequestOptions
from ...types.create_saml_connection_response import CreateSamlConnectionResponse
from ...types.get_saml_connection_response import GetSamlConnectionResponse
from ...types.list_saml_connections_response import ListSamlConnectionsResponse
from ...types.update_saml_connection_response import UpdateSamlConnectionResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SamlConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_saml_connections(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSamlConnectionsResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSamlConnectionsResponse
            OK

        Examples
        --------
        from ssoready.client import SSOReady

        client = SSOReady(
            api_key="YOUR_API_KEY",
        )
        client.management.saml_connections.list_saml_connections()
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/saml-connections"),
            params=encode_query(
                jsonable_encoder(
                    remove_none_from_dict(
                        {
                            "organizationId": organization_id,
                            "pageToken": page_token,
                            **(
                                request_options.get("additional_query_parameters", {})
                                if request_options is not None
                                else {}
                            ),
                        }
                    )
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListSamlConnectionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_saml_connection(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSamlConnectionResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        primary : typing.Optional[bool]

        idp_redirect_url : typing.Optional[str]

        idp_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        sp_acs_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import SSOReady

        client = SSOReady(
            api_key="YOUR_API_KEY",
        )
        client.management.saml_connections.create_saml_connection()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        if organization_id is not OMIT:
            _request["organizationId"] = organization_id
        if primary is not OMIT:
            _request["primary"] = primary
        if idp_redirect_url is not OMIT:
            _request["idpRedirectUrl"] = idp_redirect_url
        if idp_certificate is not OMIT:
            _request["idpCertificate"] = idp_certificate
        if idp_entity_id is not OMIT:
            _request["idpEntityId"] = idp_entity_id
        if sp_entity_id is not OMIT:
            _request["spEntityId"] = sp_entity_id
        if sp_acs_url is not OMIT:
            _request["spAcsUrl"] = sp_acs_url
        _response = self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/saml-connections"),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_saml_connection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import SSOReady

        client = SSOReady(
            api_key="YOUR_API_KEY",
        )
        client.management.saml_connections.get_saml_connection(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/saml-connections/{jsonable_encoder(id)}"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GetSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_saml_connection(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSamlConnectionResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        primary : typing.Optional[bool]

        idp_redirect_url : typing.Optional[str]

        idp_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        sp_acs_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import SSOReady

        client = SSOReady(
            api_key="YOUR_API_KEY",
        )
        client.management.saml_connections.update_saml_connection(
            id_="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        if organization_id is not OMIT:
            _request["organizationId"] = organization_id
        if primary is not OMIT:
            _request["primary"] = primary
        if idp_redirect_url is not OMIT:
            _request["idpRedirectUrl"] = idp_redirect_url
        if idp_certificate is not OMIT:
            _request["idpCertificate"] = idp_certificate
        if idp_entity_id is not OMIT:
            _request["idpEntityId"] = idp_entity_id
        if sp_entity_id is not OMIT:
            _request["spEntityId"] = sp_entity_id
        if sp_acs_url is not OMIT:
            _request["spAcsUrl"] = sp_acs_url
        _response = self._client_wrapper.httpx_client.request(
            method="PATCH",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/saml-connections/{jsonable_encoder(id_)}"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UpdateSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSamlConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_saml_connections(
        self,
        *,
        organization_id: typing.Optional[str] = None,
        page_token: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListSamlConnectionsResponse:
        """
        Parameters
        ----------
        organization_id : typing.Optional[str]

        page_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListSamlConnectionsResponse
            OK

        Examples
        --------
        from ssoready.client import AsyncSSOReady

        client = AsyncSSOReady(
            api_key="YOUR_API_KEY",
        )
        await client.management.saml_connections.list_saml_connections()
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/saml-connections"),
            params=encode_query(
                jsonable_encoder(
                    remove_none_from_dict(
                        {
                            "organizationId": organization_id,
                            "pageToken": page_token,
                            **(
                                request_options.get("additional_query_parameters", {})
                                if request_options is not None
                                else {}
                            ),
                        }
                    )
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListSamlConnectionsResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_saml_connection(
        self,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CreateSamlConnectionResponse:
        """
        Parameters
        ----------
        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        primary : typing.Optional[bool]

        idp_redirect_url : typing.Optional[str]

        idp_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        sp_acs_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CreateSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import AsyncSSOReady

        client = AsyncSSOReady(
            api_key="YOUR_API_KEY",
        )
        await client.management.saml_connections.create_saml_connection()
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        if organization_id is not OMIT:
            _request["organizationId"] = organization_id
        if primary is not OMIT:
            _request["primary"] = primary
        if idp_redirect_url is not OMIT:
            _request["idpRedirectUrl"] = idp_redirect_url
        if idp_certificate is not OMIT:
            _request["idpCertificate"] = idp_certificate
        if idp_entity_id is not OMIT:
            _request["idpEntityId"] = idp_entity_id
        if sp_entity_id is not OMIT:
            _request["spEntityId"] = sp_entity_id
        if sp_acs_url is not OMIT:
            _request["spAcsUrl"] = sp_acs_url
        _response = await self._client_wrapper.httpx_client.request(
            method="POST",
            url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "v1/saml-connections"),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(CreateSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_saml_connection(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> GetSamlConnectionResponse:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        GetSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import AsyncSSOReady

        client = AsyncSSOReady(
            api_key="YOUR_API_KEY",
        )
        await client.management.saml_connections.get_saml_connection(
            id="id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            method="GET",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/saml-connections/{jsonable_encoder(id)}"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(GetSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_saml_connection(
        self,
        id_: str,
        *,
        id: typing.Optional[str] = OMIT,
        organization_id: typing.Optional[str] = OMIT,
        primary: typing.Optional[bool] = OMIT,
        idp_redirect_url: typing.Optional[str] = OMIT,
        idp_certificate: typing.Optional[str] = OMIT,
        idp_entity_id: typing.Optional[str] = OMIT,
        sp_entity_id: typing.Optional[str] = OMIT,
        sp_acs_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> UpdateSamlConnectionResponse:
        """
        Parameters
        ----------
        id_ : str

        id : typing.Optional[str]

        organization_id : typing.Optional[str]

        primary : typing.Optional[bool]

        idp_redirect_url : typing.Optional[str]

        idp_certificate : typing.Optional[str]

        idp_entity_id : typing.Optional[str]

        sp_entity_id : typing.Optional[str]

        sp_acs_url : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UpdateSamlConnectionResponse
            OK

        Examples
        --------
        from ssoready.client import AsyncSSOReady

        client = AsyncSSOReady(
            api_key="YOUR_API_KEY",
        )
        await client.management.saml_connections.update_saml_connection(
            id_="id",
        )
        """
        _request: typing.Dict[str, typing.Any] = {}
        if id is not OMIT:
            _request["id"] = id
        if organization_id is not OMIT:
            _request["organizationId"] = organization_id
        if primary is not OMIT:
            _request["primary"] = primary
        if idp_redirect_url is not OMIT:
            _request["idpRedirectUrl"] = idp_redirect_url
        if idp_certificate is not OMIT:
            _request["idpCertificate"] = idp_certificate
        if idp_entity_id is not OMIT:
            _request["idpEntityId"] = idp_entity_id
        if sp_entity_id is not OMIT:
            _request["spEntityId"] = sp_entity_id
        if sp_acs_url is not OMIT:
            _request["spAcsUrl"] = sp_acs_url
        _response = await self._client_wrapper.httpx_client.request(
            method="PATCH",
            url=urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"v1/saml-connections/{jsonable_encoder(id_)}"
            ),
            params=encode_query(
                jsonable_encoder(
                    request_options.get("additional_query_parameters") if request_options is not None else None
                )
            ),
            json=jsonable_encoder(_request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(_request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(UpdateSamlConnectionResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
